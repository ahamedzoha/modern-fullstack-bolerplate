services:
  backend:
    build:
      context: ./be
      target: development
    container_name: nest_app
    ports:
      - "3001:3001"
    volumes:
      - ./be:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./be/.env
    depends_on:
      - postgres
    networks:
      - app-network

  frontend:
    build:
      context: ./fe
      target: development
    container_name: next_app
    ports:
      - "3000:3000"
    env_file:
      - ./fe/.env.local
    networks:
      - app-network

  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  logto:
    image: svhd/logto:${LOGTO_TAG-latest}
    container_name: logto
    entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
    environment:
      - TRUST_PROXY_HEADER=1
      - DB_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # - ENDPOINT
      # - ADMIN_ENDPOINT
    ports:
      - 3001:3001
      - 3002:3002
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl/cert.pem:/etc/nginx/ssl/cert.pem:ro
      - ./nginx/ssl/key.pem:/etc/nginx/ssl/key.pem:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
